openapi: 3.0.1
info:
  title: Metadata Standards Catalog
  description: "The RDA [Metadata Standards Catalog](https://rdamsc.bath.ac.uk/) is a collaborative, open directory of metadata standards applicable to research data. It is offered to the international academic community to help address infrastructure challenges."
  termsOfService: https://rdamsc.bath.ac.uk/terms-of-use
  version: 2.0.0
externalDocs:
  description: Browse the source code
  url: https://www.github.com/rd-alliance/metadata-catalog-dev
servers:
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/alex-ball/rda-metadata-standards-catalog/2.0.0
- description: Live server
  url: https://rdamsc.bath.ac.uk
tags:
- name: query
  description: Search the catalog
- name: m
  description: Metadata schemes
- name: g
  description: Organizations (groups)
- name: t
  description: Tools
- name: c
  description: Mappings (crosswalks)
- name: e
  description: Endorsements
- name: user
  description: Manage your API account
paths:
  /query/schemes:
    post:
      tags:
      - query
      - m
      summary: "Search for metadata schemes"
      requestBody:
        description: "You must provide one or more parameters. Parameters are combined with Boolean OR."
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Python-compatible [regular expression](https://docs.python.org/3/library/re.html), for searching within titles."
                keyword:
                  type: string
                  description: "Pipe-separated list of keywords to search for, e.g. Astronomy|Biology. Returns schemes tagged with at least one of the exact given keywords or one of their narrower or broader terms."
                keyword_id:
                  type: string
                  description: "Pipe separated list of URIs from the UNESCO Vocabulary. Returns schemes tagged with at least one of the exact given keywords or one of their narrower or broader terms. (You may notice a difference in behaviour from `keyword` since it skips an initial translation step.)"
                identifier:
                  type: string
                  description: "Single, exact identifier to search for. DOIs should start `10.` and internal identifiers with `msc:m`."
                funder:
                  type: string
                  description: "Python-compatible [regular expression](https://docs.python.org/3/library/re.html), to search for within names of organizations listed as funders of the scheme."
                funder_id:
                  type: string
                  description: "Single, exact identifier to search for within the IDs of organizations listed as funders of the scheme."
                dataType:
                  type: string
                  description: "Single, exact data type label or URI to search for within the list of data types."
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
  /query/organizations:
    post:
      tags:
      - query
      - g
      summary: "Search for organizations"
      requestBody:
        description: "You must provide one or more parameters. Parameters are combined with Boolean OR."
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Python-compatible [regular expression](https://docs.python.org/3/library/re.html), for searching within organization names."
                identifier:
                  type: string
                  description: "Single, exact identifier to search for. DOIs should start `10.` and internal identifiers with `msc:g`."
                type:
                  type: string
                  description: "Type of organization to search for"
                  enum:
                  - standards body
                  - archive
                  - professional group
                  - coordination group
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
  /query/tools:
    post:
      tags:
      - query
      - t
      summary: "Search for tools"
      requestBody:
        description: "You must provide one or more parameters. Parameters are combined with Boolean OR."
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Python-compatible [regular expression](https://docs.python.org/3/library/re.html), for searching within titles."
                identifier:
                  type: string
                  description: "Single, exact identifier to search for. DOIs should start `10.` and internal identifiers with `msc:t`."
                type:
                  type: string
                  description: "Type of tool to search for: terminal(⟨platform⟩), graphical(⟨platform⟩), web service, web application."
                supported_scheme:
                  type: string
                  description: "Internal metadata scheme identifier to search for among the schemes supported by the tool: msc:m⟨number⟩."
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
  /query/mappings:
    post:
      tags:
      - query
      - c
      summary: "Search for metadata mappings"
      requestBody:
        description: "You must provide one or more parameters. `input_scheme` and `output_scheme` are combined with Boolean AND if both are given, while `identifier` combines with the others with Boolean OR."
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: "Single, exact identifier to search for. DOIs should start `10.` and internal identifiers with `msc:c`."
                input_scheme:
                  type: string
                  description: "Internal metadata scheme identifier to search for among the schemes that can be used as input by the mapping: msc:m⟨number⟩."
                output_scheme:
                  type: string
                  description: "Internal metadata scheme identifier to search for among the schemes that can be constructed as output by the mapping: msc:m⟨number⟩."
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
  /query/endorsements:
    post:
      tags:
      - query
      - e
      summary: "Search for endorsements"
      requestBody:
        description: "You must provide one or more parameters. Parameters are combined with Boolean OR."
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: "Single, exact identifier to search for. DOIs should start `10.` and internal identifiers with `msc:e`."
                endorsed_scheme:
                  type: string
                  description: "Internal metadata scheme identifier to search for among the schemes endorsed by the endorsement: msc:m⟨number⟩."
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
  /api/m:
    get:
      tags:
      - m
      summary: "List all metadata schemes"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata-schemes:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemResponse'
    post:
      tags:
      - m
      summary: "Submit a new metadata scheme record"
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataScheme'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - api_user: []
  /api/m{int}:
    get:
      tags:
      - m
      summary: "Retrieve an existing metadata scheme record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        404:
          description: "Metadata scheme not found"
          content: {}
    put:
      tags:
      - m
      summary: "Modify an existing metadata scheme record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataScheme'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Metadata scheme not found"
          content: {}
      security:
      - api_user: []
    delete:
      tags:
      - m
      summary: "Remove an existing metadata scheme record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Metadata scheme not found"
          content: {}
      security:
      - api_user: []
  /api/g:
    get:
      tags:
      - g
      summary: "List all organizations"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemResponse'
    post:
      tags:
      - g
      summary: "Submit a new organization record"
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - api_user: []
  /api/g{int}:
    get:
      tags:
      - g
      summary: "Retrieve an existing organization record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        404:
          description: "Organization not found"
          content: {}
    put:
      tags:
      - g
      summary: "Modify an existing organization record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Organization not found"
          content: {}
      security:
      - api_user: []
    delete:
      tags:
      - g
      summary: "Remove an existing organization record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Organization not found"
          content: {}
      security:
      - api_user: []
  /api/t:
    get:
      tags:
      - t
      summary: "List all tools"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemResponse'
    post:
      tags:
      - t
      summary: "Submit a new tool record"
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - api_user: []
  /api/t{int}:
    get:
      tags:
      - t
      summary: "Retrieve an existing tool record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        404:
          description: "Tool not found"
          content: {}
    put:
      tags:
      - t
      summary: "Modify an existing tool record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Tool not found"
          content: {}
      security:
      - api_user: []
    delete:
      tags:
      - t
      summary: "Remove an existing tool record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Tool not found"
          content: {}
      security:
      - api_user: []
  /api/c:
    get:
      tags:
      - c
      summary: "List all mappings"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  mappings:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemResponse'
    post:
      tags:
      - c
      summary: "Submit a new mapping record"
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mapping'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - api_user: []
  /api/c{int}:
    get:
      tags:
      - c
      summary: "Retrieve an existing mapping record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        404:
          description: "Mapping not found"
          content: {}
    put:
      tags:
      - c
      summary: "Modify an existing mapping record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mapping'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Mapping not found"
          content: {}
      security:
      - api_user: []
    delete:
      tags:
      - c
      summary: "Remove an existing mapping record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Mapping not found"
          content: {}
      security:
      - api_user: []
  /api/e:
    get:
      tags:
      - e
      summary: "List all endorsements"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  endorsements:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemResponse'
    post:
      tags:
      - e
      summary: "Submit a new endorsement record"
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endorsement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - api_user: []
  /api/e{int}:
    get:
      tags:
      - e
      summary: "Retrieve an existing endorsement record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        404:
          description: "Endorsement not found"
          content: {}
    put:
      tags:
      - e
      summary: "Modify an existing endorsement record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      requestBody:
        description: "Complete record in JSON."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endorsement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseSuccess'
        400:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponseFailure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Endorsement not found"
          content: {}
      security:
      - api_user: []
    delete:
      tags:
      - e
      summary: "Remove an existing endorsement record"
      parameters:
      - name: int
        in: path
        required: true
        description: "Numeric portion of the MSC ID."
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Endorsement not found"
          content: {}
      security:
      - api_user: []
  /api/reset-password:
    post:
      tags:
      - user
      summary: "Change API user password"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  description: "New password to use for subsequent calls."
              required:
              - new_password
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: "Confirmation of the username for which the password was reset."
                  password_reset:
                    type: boolean
                    description: "True if the reset was successful."
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          description: "Internal Server Error: password could not be reset"
          content: {}
      security:
      - api_user: []
  /api/token:
    get:
      tags:
      - user
      summary: "Request an authorization token"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "Authorization token valid for 600 seconds."
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - api_user: []
components:
  schemas:
    Slug:
      type: string
      readOnly: true
      description: "Semantic identifier for the record."
      pattern: '^[-a-z0-9]{1,71}$'
    ID:
      type: string
      readOnly: true
      description: "Non-semantic internal identifier for the record."
      pattern: '^msc:(m|g|t|c|e|datatype|location|type|id_scheme)\d+$'
    URI:
      type: string
      readOnly: true
      description: "API URL from which the record for the current entity may be downloaded."
      pattern: '^[-a-z0-9]{1,71}$'
    Identifier:
      type: object
      properties:
        id:
          type: string
          description: "The identifier string. DOIs should start `10.`."
        scheme:
          type: string
          description: "A keyword indicating the scheme from which the identifier is drawn. Valid keywords may be obtained from the `id_schemes` endpoint."
    Location:
      type: object
      properties:
        url:
          type: string
          description: "URL of the Web resource. Normalized specifications hosted by the MSC should be specified using a relative URL."
        type:
          type: string
          description: "A keyword describing the type of resource. Valid keywords may be obtained from the `locations` endpoint."
    DateRange:
      type: object
      properties:
        start:
          type: string
          pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
          description: "The start date of the period."
        end:
          type: string
          pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
          description: "The end date of the period (if applicable)."
    Creator:
      type: object
      properties:
        fullName:
          type: string
          description: "Full name. If absent, a concatenation of the `givenName` and `familyName` will be used for display."
        givenName:
          type: string
          description: "Given name(s)"
        familyName:
          type: string
          description: "Family name"
    MetadataScheme:
      type: object
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        id:
          $ref: '#/components/schemas/ID'
        uri:
          $ref: '#/components/schemas/URI'
        title:
          type: string
          description: "The full, human understandable name of the metadata scheme.

      - If the scheme is known by an abbreviation, put this at the start of the title, then give the expanded form in parentheses, e.g. “SDMX (Statistical Data and Metadata Exchange)”.

      - If the title is in English, use title case, i.e. give each significant word a capital letter. Do not use an irregular case to indicate how an abbreviation was defined, e.g. do not write “Statistical Data and Metadata eXchange”."
        description:
          type: string
          description: "A few sentences describing the nature of the standard and for what it is meant to be used. If any of the information in the remainder of the record needs be clarified, perhaps because the reality is more nuanced than the coarse semantics provide for, then an explanation can be given here."
        keywords:
          type: array
          description: "Keywords indicating the disciplinary scope of the scheme. Provide as few terms as possible to describe the subject areas in which the scheme is most used and useful. In some cases, it may be better to use a broader term even if not all of the available narrower terms apply."
          items:
            type: string
            format: URI
            description: "A URI drawn from the local profile of the UNESCO Thesaurus. Most UNESCO Concept URIs may be used, in addition to MSC Concept URIs. Valid values may be queried from the `keywords` endpoint."
        dataTypes:
          type: array
          description: "Data types most commonly described by metadata records that conform to this scheme. The MSC will take a “folksonomic” approach to the human-readable values for this element: users will be able to supply any value but will be encouraged to reuse values already in the database. Trivially different values may be merged/normalized by the MSC editors, unless clarified with a URL."
          items:
            type: object
            properties:
              url:
                type: string
                description: "URL pointing to an entry in a data type registry."
              label:
                type: string
                description: "Human-readable term."
        locations:
          type: array
          description: "Locations where further information about the scheme may be accessed."
          items:
            $ref: '#/components/schemas/Location'
        identifiers:
          type: array
          description: "Strings used to identify all versions of this scheme collectively."
          items:
            $ref: '#/components/schemas/Identifier'
        relatedEntities:
          type: array
          description: "Other entities in the MSC database."
          items:
            type: object
            properties:
              id:
                type: string
                description: "Full MSC ID of the entity."
                pattern: '^msc:(m|g|t|c|e)\d+$'
              role:
                type: string
                description: "The manner of the relationship between the entity and the scheme."
                enum:
                - "parent scheme"
                - "child scheme"
                - "input to mapping"
                - "output from mapping"
                - "maintainer"
                - "funder"
                - "user"
                - "tool"
                - "endorsement"
              details:
                type: object
                readOnly: true
                oneOf:
                - $ref: '#/components/schemas/Endorsement'
                - $ref: '#/components/schemas/Mapping'
                - $ref: '#/components/schemas/MetadataScheme'
                - $ref: '#/components/schemas/Organization'
                - $ref: '#/components/schemas/Tool'
        versions:
          type: array
          items:
            properties:
              number:
                type: string
                description: "The number, code or other string used to identify the version, omitting any initial “v”, “v.” or “ver.”."
              title:
                type: string
                description: "The full, human understandable name of this version of the metadata scheme. This should be provided only if it differs from the title given for the scheme as a whole."
              note:
                type: string
                description: "If this version requires some explanation, give it here."
              available:
                type: string
                pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
                description: "The date on which this version was made available as a draft or proposal. A version with an `available` date but no `issued` date is assumed not to be approved by its maintainer for use. (This element is provided to allow schemes or versions to be entered into the MSC prior to official approval; retrospectively uncovering this information for versions that have been issued is not encouraged.)"
              issued:
                type: string
                pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
                description: "The date on which the version was released or published. This also implies the date on which the version was approved for use by its maintainer, unless an explicit `valid` date is also given."
              valid:
                allOf:
                - description: "A version of a scheme is assumed to be approved for use by its maintainer from its `issued` date until the issued date of a subsequent version. If this is not the case, (for example, where multiple versions are approved simultaneously), `valid` expresses the period for which a version is approved for use. A single date indicates that the version is still approved for use, despite the issue of subsequent versions. The second date in a range indicates the date on which approval was withdrawn."
                - $ref: '#/components/schemas/DateRange'
              locations:
                type: array
                description: "Locations where further information about this version of the scheme may be accessed."
                items:
                  $ref: '#/components/schemas/Location'
              identifiers:
                type: array
                description: "Strings used to identify this version of the scheme."
                items:
                  $ref: '#/components/schemas/Identifier'
              samples:
                type: array
                description: "Metadata records conforming to the scheme."
                items:
                  type: object
                  properties:
                    url:
                      type: string
                      description: "URL of the sample record. For samples hosted by the MSC, the URL should be specified in relative form."
                    title:
                      type: string
                      description: "The value of the title element from the sample record, or an equivalent short summary of what the sample record describes."
    Endorsement:
      type: object
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        id:
          $ref: '#/components/schemas/ID'
        uri:
          $ref: '#/components/schemas/URI'
        title:
          type: string
          description: "The title of the endorsement document."
        description:
          type: string
          description: "Description of the endorsement document.

      - Use this to record any caveats to the endorsement.

      - This could indicate if only certain versions of the scheme(s) are endorsed."
        creators:
          type: array
          description: "Authors of the endorsement document"
          items:
            $ref: '#/components/schemas/Creator'
        publication:
          type: string
          description: "Other bibliographic information (excluding date)."
        issued:
          type: string
          pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
          description: "The date on which the endorsement was made. Use of this element does not imply that the originating organization reviews the endorsement for validity. If both `issued` and `valid` are given, issued is ignored."
        valid:
          allOf:
          - description: "The start date expresses when the endorsement was made. If there is no end date, this implies that the originating organization currently endorses the standard. (If that implication is inappropriate, the date should be given under `issued` instead.)

If an end date is provided, it expresses the date on which the endorsement was withdrawn."
          - $ref: '#/components/schemas/DateRange'
        locations:
          type: array
          description: "Locations where further information about the endorsement may be accessed."
          items:
            $ref: '#/components/schemas/Location'
        identifiers:
          type: array
          description: "Strings used to identify the endorsement."
          items:
            $ref: '#/components/schemas/Identifier'
        relatedEntities:
          type: array
          description: "Other entities in the MSC database."
          items:
            type: object
            properties:
              id:
                type: string
                description: "Full MSC ID of the entity."
                pattern: '^msc:(m|g|t|c|e)\d+$'
              role:
                type: string
                description: "The manner of the relationship between the entity and the endorsement."
                enum:
                - "endorsed scheme"
                - "originator"
              details:
                type: object
                readOnly: true
                oneOf:
                - $ref: '#/components/schemas/MetadataScheme'
                - $ref: '#/components/schemas/Organization'
    Mapping:
      type: object
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        id:
          $ref: '#/components/schemas/ID'
        uri:
          $ref: '#/components/schemas/URI'
        name:
          type: string
          description: "Name or descriptor for the mapping."
        description:
          type: string
          description: "A short description of the mapping.

This could indicate if only certain versions of the input and output schemes are supported; if the mapping has been tailored to the outputs or inputs of specific repositories or services; if certain parts of the input or output schemes have been ignored; or if specific conventions in the input scheme are preferred (or necessary).

This could recommend steps to be taken before or after applying the mapping in order to improve results."
        creators:
          type: array
          description: "Persons or organizations responsible for creating, maintaining, or approving the mapping (the emphasis here is on establishing provenance/responsibility rather than a strict understanding of creation). If a maintaining organization has an entry in the MSC, it should be given under `relatedEntities` with type ‘maintainer’ rather than here."
          items:
            $ref: '#/components/schemas/Creator'
        locations:
          type: array
          description: "Locations where further information about the tool may be accessed."
          items:
            $ref: '#/components/schemas/Location'
        identifiers:
          type: array
          description: "Strings used to identify the mapping or version."
          items:
            $ref: '#/components/schemas/Identifier'
        relatedEntities:
          type: array
          description: "Other entities in the MSC database."
          items:
            type: object
            properties:
              id:
                type: string
                description: "Full MSC ID of the entity."
                pattern: '^msc:(m|g|t|c|e)\d+$'
              role:
                type: string
                description: "The manner of the relationship between the entity and the mapping."
                enum:
                - "input scheme"
                - "output scheme"
                - "maintainer"
                - "funder"
              details:
                type: object
                readOnly: true
                oneOf:
                - $ref: '#/components/schemas/MetadataScheme'
                - $ref: '#/components/schemas/Organization'
        versions:
          type: array
          items:
            properties:
              number:
                type: string
                description: "The number, code or other string used to identify the version, omitting any initial “v”, “v.” or “ver.”."
              note:
                type: string
                description: "If this version requires some explanation, give it here."
              issued:
                type: string
                pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
                description: "The date on which the version was published."
              locations:
                type: array
                description: "Locations where further information about this version of the mapping may be accessed."
                items:
                  $ref: '#/components/schemas/Location'
              identifiers:
                type: array
                description: "Strings used to identify this version of the mapping."
                items:
                  $ref: '#/components/schemas/Identifier'
    Organization:
      type: object
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        id:
          $ref: '#/components/schemas/ID'
        uri:
          $ref: '#/components/schemas/URI'
        name:
          type: string
          description: "The full name of the organization as it is usually given."
        description:
          type: string
          description: "A sentence or several describing the organization and its relevance to research data and metadata."
        types:
          type: array
          items:
            type: string
            description: "A keyword describing the type of organization. Valid keywords may be obtained from the `types` endpoint."
        locations:
          type: array
          description: "Locations where further information about the organization may be accessed."
          items:
            $ref: '#/components/schemas/Location'
        identifiers:
          type: array
          description: "Strings used to identify the organization."
          items:
            $ref: '#/components/schemas/Identifier'
        relatedEntities:
          type: array
          description: "Other entities in the MSC database."
          items:
            type: object
            properties:
              id:
                type: string
                description: "Full MSC ID of the entity."
                pattern: '^msc:(m|g|t|c|e)\d+$'
              role:
                type: string
                description: "The manner of the relationship between the entity and the organization."
                enum:
                - "maintained scheme"
                - "maintained tool"
                - "maintained mapping"
                - "funded scheme"
                - "funded tool"
                - "funded mapping"
                - "used scheme"
                - "endorsement"
              details:
                type: object
                readOnly: true
                oneOf:
                - $ref: '#/components/schemas/MetadataScheme'
                - $ref: '#/components/schemas/Tool'
                - $ref: '#/components/schemas/Mapping'
                - $ref: '#/components/schemas/Endorsement'
    Tool:
      type: object
      properties:
        slug:
          $ref: '#/components/schemas/Slug'
        id:
          $ref: '#/components/schemas/ID'
        uri:
          $ref: '#/components/schemas/URI'
        title:
          type: string
          description: "The full, human understandable name of the tool.

  - If the tool is known by an abbreviation, put this at the start of the title, then give the expanded form in parentheses, e.g. “CMOR (Climate Model Output Rewriter)”.

  - If the title is in English, use title case, i.e. give each significant word a capital letter. Do not use an irregular case to indicate how an abbreviation was defined, e.g. do not write “eXtensible Editor”."
        description:
          type: string
          description: "A short description of the intended use of the tool, and its capabilities."
        types:
          type: array
          description: "Terms describing how a user interacts with the tool."
          items:
            type: string
            description: "Must be one of ‘terminal (⟨platform⟩)’, ‘graphical (⟨platform⟩)’, ‘web service’, or ‘web application’, where ⟨platform⟩ is ‘Windows’, ‘Mac OS X’, ‘Linux’, ‘BSD’, ‘cross-platform’ or similar."
        identifiers:
          type: array
          description: "Strings used to identify the tool or version."
          items:
            $ref: '#/components/schemas/Identifier'
        locations:
          type: array
          description: "Locations where further information about the tool may be accessed."
          items:
            $ref: '#/components/schemas/Location'
        creators:
          type: array
          description: "Persons or organizations responsible for creating, maintaining, or approving the tool (the emphasis here is on establishing provenance/responsibility rather than a strict understanding of creation). If a maintaining organization has an entry in the MSC, it should be given under `relatedEntities` with type ‘maintainer’ rather than here."
          items:
            $ref: '#/components/schemas/Creator'
        relatedEntities:
          type: array
          description: "Other entities in the MSC database."
          items:
            type: object
            properties:
              id:
                type: string
                description: "Full MSC ID of the entity."
                pattern: '^msc:(m|g|t|c|e)\d+$'
              role:
                type: string
                description: "The manner of the relationship between the entity and the tool."
                enum:
                - "supported scheme"
                - "maintainer"
                - "funder"
              details:
                type: object
                readOnly: true
                oneOf:
                - $ref: '#/components/schemas/MetadataScheme'
                - $ref: '#/components/schemas/Organization'
        versions:
          type: array
          items:
            properties:
              number:
                type: string
                description: "The number, code or other string used to identify the version, omitting any initial “v”, “v.” or “ver.”."
              title:
                type: string
                description: "The full, human understandable name of this version of the tool. This should be provided only if it differs from the title given for the tool as a whole."
              note:
                type: string
                description: "If this version requires some explanation, give it here."
              issued:
                type: string
                pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
                description: "The date on which the version was released."
              locations:
                type: array
                description: "Locations where further information about this version of the tool may be accessed."
                items:
                  $ref: '#/components/schemas/Location'
              identifiers:
                type: array
                description: "Strings used to identify this version of the tool."
                items:
                  $ref: '#/components/schemas/Identifier'
    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "Whether the record was deleted successfully."
        id:
          type: string
          description: "Full MSC ID of deleted record."
          pattern: '^msc:(m|g|t|c|e)\d+$'
    ItemResponse:
      type: object
      properties:
        id:
          type: integer
          description: "Numeric portion of the MSC ID."
        slug:
          type: string
          description: "A less opaque identifying string for the record, derived from the title of a metadata scheme, the name of an organization, etc."
    QueryResponse:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            description: "Full MSC ID."
            pattern: '^msc:(m|g|t|c|e)\d+$'
    SubmissionResponseSuccess:
      type: object
      properties:
        success:
          type: boolean
          description: "Whether record passed validation."
          enum:
          - true
        conformance:
          type: string
          description: "Conformance level of the record."
          enum:
            - complete
            - useful
            - valid
        id:
          type: string
          description: "Full MSC ID of newly created record."
          pattern: '^msc:(m|g|t|c|e)\d+$'
    SubmissionResponseFailure:
      type: object
      properties:
        success:
          type: boolean
          description: "Whether record passed validation."
          enum:
          - false
        conformance:
          type: string
          description: "Conformance level of the record."
          enum:
            - invalid
        errors:
          type: object
          description: "Errors returned by form validation, listed under the places where they occurred."
          example: { "locations": [ { "type": [ "Not a valid choice" ] } ] }
  responses:
    UnauthorizedError:
      description: Unauthorized access
      headers:
        WWW_Authenticate:
          schema:
            type: string
  securitySchemes:
    api_user:
      type: http
      description: "If using an API token, use this as the username and any arbitrary string as the password."
      scheme: basic
